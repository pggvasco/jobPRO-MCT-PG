Public Class xaeJobTemplate
    Inherits xaegJobTemplate

    'Public Property Defaults As API.Defaults

    Private Sub xaeJobTemplate_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load

        'Try
        '    Defaults = API.Defaults.Defaults
        'Catch ex As Exception
        '    Setup.Log.logError("Error loading System Defaults.", ex)
        'End Try

        Try
            SetCLH()
        Catch ex As Exception
            Setup.Log.logError("Error setting component layout helper.", ex)
        End Try

        Try
            Dim clm As New Helper.ActiveRecord.LookupMaintenance(Of API.JobCategory)(JobCategoryLookUpEdit, xaeJobCategory, AddressOf LoadCategories, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Categories.")
        End Try

        Try
            Dim wcclm As New Helper.ActiveRecord.LookupMaintenance(Of API.WorkCentreCategory)(WorkCentreCategoryLookUpEdit, xaeWorkCentreCategory, AddressOf LoadWorkCentreCategories, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Work Centre Categories.")
        End Try

        Try
            Dim tlm As New Helper.ActiveRecord.LookupMaintenance(Of API.JobType)(JobTypeTextEdit, xaeJobType, AddressOf LoadTypes, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Job Types.")
        End Try

        Try
            Dim cclm As New Helper.ActiveRecord.LookupMaintenance(Of API.CostCentre)(CostCentreLookUpEdit, xaeCostCentre, AddressOf LoadCostCentres, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Cost Centres.")
        End Try

        Try
            Dim mlm As New Helper.ActiveRecord.LookupMaintenance(Of API.Make)(MakeLookUpEdit, xaeMake, AddressOf LoadMakes, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Makes.")
        End Try

        Try
            Dim modlm As New Helper.ActiveRecord.LookupMaintenance(Of API.Model)(ModelLookUpEdit, xaeModel, AddressOf LoadModels, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Models.")
        End Try

        Try
            Dim flm As New Helper.ActiveRecord.LookupMaintenance(Of API.Function)(FunctionLookUpEdit, xaeFunction, AddressOf LoadFunctions, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Functions.")
        End Try

        Try
            Dim glm As New Helper.ActiveRecord.LookupMaintenance(Of API.Generation)(GenerationLookupEdit, xaeGeneration, AddressOf LoadGenerations, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Generations.")
        End Try

        Try
            Dim dlm As New Helper.ActiveRecord.LookupMaintenance(Of API.Drawing)(DrawingLookUpEdit, xaeDrawing, AddressOf LoadDrawings, Me.Conversation)
        Catch ex As Exception
            Setup.Log.logError("Error setting lookup maintenance for Drawings.")
        End Try

        Try
            Dim plbl As New Helper.Evolution.LookupLoader(Of Pastel.Evolution.PriceList)(PricelistLookUpEdit, PriceListBindingSource, "IDPricelistName")
        Catch ex As Exception
            Setup.Log.logError("Error setting loader for Pricelists.", ex)
        End Try

        Try
            SetDefaultData()
        Catch ex As Exception
            Setup.Log.logError("Error setting default data on job.", ex)
        End Try

        Try
            SetNumbering()
        Catch ex As Exception
            Setup.Log.logError("Error setting numbering on job.", ex)
        End Try

    End Sub

    Private Sub SetDefaultData()
        If IIf(API.Context.Defaults.IsTemplateNumberAutoGenerated.HasValue, API.Context.Defaults.IsTemplateNumberAutoGenerated, False) Then
            TemplateNumberTextEdit.Properties.ReadOnly = True
        Else
            TemplateNumberTextEdit.Properties.ReadOnly = False
        End If
    End Sub

    Private Sub SetNumbering()
        If Me.Record.ID = 0 Then
            If IIf(API.Context.Defaults.IsTemplateNumberAutoGenerated.HasValue, API.Context.Defaults.IsTemplateNumberAutoGenerated, False) Then
                Me.Record.TemplateNumber = API.Defaults.Defaults.GetNextTemplateNumber(Me.Record) + " *"
                TemplateNumberTextEdit.Properties.ReadOnly = True
            Else
                TemplateNumberTextEdit.Properties.ReadOnly = False
            End If

        Else
            TemplateNumberTextEdit.Properties.ReadOnly = True
        End If
    End Sub

    Private Overloads Sub SetCLH()
        CLH.Components.Add(DataLayoutControl1)
    End Sub

    Private Function LoadWorkCentreCategories() As IEnumerable(Of API.WorkCentreCategory)
        Return API.WorkCentreCategory.FindAll
    End Function

    Private Function LoadCategories() As IEnumerable(Of API.JobCategory)
        Return API.JobCategory.FindAll
    End Function

    Private Function LoadTypes() As IEnumerable(Of API.JobType)
        Return API.JobType.FindAll
    End Function

    Private Function LoadCostCentres() As IEnumerable(Of API.CostCentre)
        Return API.CostCentre.FindAll
    End Function

    Private Function LoadMakes() As IEnumerable(Of API.Make)
        Return API.Make.FindAll
    End Function

    Private Function LoadModels() As IEnumerable(Of API.Model)
        Dim mk As API.Make = TryCast(MakeLookUpEdit.EditValue, API.Make)
        If mk IsNot Nothing Then
            Dim crit = NHibernate.Criterion.DetachedCriteria.For(Of API.Model)()
            crit.Add(NHibernate.Criterion.Expression.Or(NHibernate.Criterion.Expression.Eq("Make", mk), NHibernate.Criterion.Expression.IsNull("Make")))
            Return API.Model.FindAll(crit)
        Else
            Return API.Model.FindAll
        End If
    End Function

    Private Function LoadFunctions() As IEnumerable(Of API.Function)
        Dim mk As API.Make = TryCast(MakeLookUpEdit.EditValue, API.Make)
        If mk IsNot Nothing Then
            Dim crit = NHibernate.Criterion.DetachedCriteria.For(Of API.Function)()
            crit.Add(NHibernate.Criterion.Expression.Or(NHibernate.Criterion.Expression.Eq("Make", mk), NHibernate.Criterion.Expression.IsNull("Make")))
            Return API.Function.FindAll(crit)
        Else
            Return API.Function.FindAll
        End If
    End Function

    Private Function LoadDrawings() As IEnumerable(Of API.Drawing)
        Return API.Drawing.FindAll
    End Function

    Private Function LoadGenerations() As IEnumerable(Of API.Generation)
        Return API.Generation.FindAll
    End Function

    Private Sub MakeLookUpEdit_EditValueChanged(sender As System.Object, e As System.EventArgs) Handles MakeLookUpEdit.EditValueChanged
        Dim mk As API.Make = TryCast(MakeLookUpEdit.EditValue, API.Make)
        If mk IsNot Nothing Then
            ModelLookUpEdit.Enabled = True
            FunctionLookUpEdit.Enabled = True
            Try
                ModelBindingSource.DataSource = LoadModels()
            Catch ex As Exception
                Setup.Log.logError("Erorr loading Models.", ex)
            End Try
            Try
                FunctionBindingSource.DataSource = LoadFunctions()
            Catch ex As Exception
                Setup.Log.logError("Erorr loading Functions.", ex)
            End Try
        Else
            ModelLookUpEdit.Enabled = False
            FunctionLookUpEdit.Enabled = False
            ModelBindingSource.DataSource = Nothing
            FunctionBindingSource.DataSource = Nothing
        End If
    End Sub

    Private Sub CostCentreLookUpEdit_EditValueChanged(sender As System.Object, e As System.EventArgs) Handles CostCentreLookUpEdit.EditValueChanged
        Dim cc As API.CostCentre = TryCast(CostCentreLookUpEdit.EditValue, API.CostCentre)
        If cc IsNot Nothing Then
            If cc <> Me.Record.CostCentre Then
                Me.Record.CostCentre = cc
                Try
                    SetNumbering()
                Catch ex As Exception
                    Setup.Log.logError("Error setting numbering on job.", ex)
                End Try
            End If
        End If
    End Sub

    Private Sub JobTypeLookUpEdit_EditValueChanged(sender As System.Object, e As System.EventArgs) Handles JobTypeTextEdit.EditValueChanged
        Dim jt As API.JobType = TryCast(JobTypeTextEdit.EditValue, API.JobType)
        If jt IsNot Nothing Then
            If jt <> Me.Record.JobType Then
                Me.Record.JobType = jt
                Try
                    SetNumbering()
                Catch ex As Exception
                    Setup.Log.logError("Error setting numbering on job.", ex)
                End Try
            End If
        End If
    End Sub

    Private Sub JobCategoryLookUpEdit_EditValueChanged(sender As System.Object, e As System.EventArgs) Handles JobCategoryLookUpEdit.EditValueChanged
        Dim jc As API.JobCategory = TryCast(JobCategoryLookUpEdit.EditValue, API.JobCategory)
        If jc IsNot Nothing Then
            If jc <> Me.Record.JobCategory Then
                Me.Record.JobCategory = jc
                Try
                    SetNumbering()
                Catch ex As Exception
                    Setup.Log.logError("Error setting numbering on job.", ex)
                End Try
            End If
        End If
    End Sub

    Protected Overrides Sub ValidationError(ByVal errors As Dictionary(Of Reflection.PropertyInfo, ArrayList))
        For Each prop As Reflection.PropertyInfo In errors.Keys
            If prop.Name = "TemplateNumber" Then
                TemplateNumberTextEdit.ErrorText = errors(prop)(0)
            End If
            If prop.Name = "CostCentre" Then
                CostCentreLookUpEdit.ErrorText = errors(prop)(0)
            End If
            If prop.Name = "JobCategory" Then
                JobCategoryLookUpEdit.ErrorText = errors(prop)(0)
            End If
        Next
        MyBase.ValidationError(errors)
    End Sub

End Class

Public Class xaegJobTemplate
    Inherits UniSource.Helper.ActiveRecord.xfAddEdit(Of API.JobTemplate)

    Public Sub New()
        MyBase.New()
        Me.FormBorderStyle = Windows.Forms.FormBorderStyle.Sizable
    End Sub

End Class