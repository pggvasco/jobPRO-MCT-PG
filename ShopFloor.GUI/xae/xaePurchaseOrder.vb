Public Class xaePurchaseOrder
    Inherits xaegPurchaseOrder

    'Public Property Defaults As API.Defaults

    Private Sub xaePurchaseOrder_Load(sender As Object, e As System.EventArgs) Handles Me.Load

        'If Defaults Is Nothing Then LoadDefaults()

        Try
            Dim jll As New Helper.GUI.LookupBackgroundLoader(Of API.Job)(JobLookUpEdit, AddressOf LoadJobs)
        Catch ex As Exception
            Setup.Log.logError("Error loading Jobs", ex)
        End Try

        Try
            Dim sll As New Helper.GUI.LookupBackgroundLoader(Of UniSource.Helper.ActiveRecord.Evolution.Vendor)(SupplierLookUpEdit, AddressOf LoadSuppliers)
        Catch ex As Exception
            Setup.Log.logError("Error loading Suppliers", ex)
        End Try

        Try
            SetState()
        Catch ex As Exception
            Setup.Log.logError("Error setting state.", ex)
        End Try

    End Sub

    Private Sub LoadDefaults()
        'Try
        '    Defaults = API.Defaults.Defaults
        'Catch ex As Exception
        '    Setup.Log.logError("Error loading System Defaults.", ex)
        'End Try
    End Sub

    Private Sub SetNumbering()

        If Me.Record.ID = 0 Then
            Me.Record.OrderDate = Today.Date
            Me.Record.AgentID = Setup.Agent.ID
            Me.Record.AgentName = Setup.Agent.Name
            If IIf(API.Context.Defaults.IsPurchaseOrderNumberAutoGenerated.HasValue, API.Context.Defaults.IsPurchaseOrderNumberAutoGenerated, False) Then
                NumberTextEdit.Properties.ReadOnly = True
                Me.Record.OrderNumber = API.Defaults.Defaults.GetNextPurchaseOrderNumber(Me.Record.Job) + " *"
            Else
                NumberTextEdit.Properties.ReadOnly = False
            End If
        Else
            NumberTextEdit.Properties.ReadOnly = True
        End If
    End Sub

    Private Sub SetState()
        If Me.Record.ID = 0 Then
            If Me.Record.Job IsNot Nothing Then
                JobLookUpEdit.Properties.ReadOnly = True
                SupplierLookUpEdit.Properties.ReadOnly = False
                PartGroupLookUpEdit.Properties.ReadOnly = False
                PartLookUpEdit.Properties.ReadOnly = False
                SupplyScopeLookUpEdit.Properties.ReadOnly = False
                WorkCentreCategoryLookUpEdit.Properties.ReadOnly = False
                WorkCentreLookUpEdit.Properties.ReadOnly = False
                gvPurchaseOrderLines.OptionsBehavior.ReadOnly = False
            Else
                JobLookUpEdit.Properties.ReadOnly = False
                SupplierLookUpEdit.Properties.ReadOnly = True
                PartGroupLookUpEdit.Properties.ReadOnly = True
                PartLookUpEdit.Properties.ReadOnly = True
                SupplyScopeLookUpEdit.Properties.ReadOnly = True
                WorkCentreCategoryLookUpEdit.Properties.ReadOnly = True
                WorkCentreLookUpEdit.Properties.ReadOnly = True
                gvPurchaseOrderLines.OptionsBehavior.ReadOnly = True
            End If
        Else
            JobLookUpEdit.Properties.ReadOnly = True
            SupplierLookUpEdit.Properties.ReadOnly = True
            PartGroupLookUpEdit.Properties.ReadOnly = True
            PartLookUpEdit.Properties.ReadOnly = True
            SupplyScopeLookUpEdit.Properties.ReadOnly = True
            WorkCentreCategoryLookUpEdit.Properties.ReadOnly = True
            WorkCentreLookUpEdit.Properties.ReadOnly = True
            gvPurchaseOrderLines.OptionsBehavior.ReadOnly = True
        End If
    End Sub

    Protected Overrides Sub SetCLH()
        MyBase.SetCLH()
        CLH.Components.Add(gvPurchaseOrderLines)
        CLH.Components.Add(DataLayoutControl)
        CLH.AddSaveEvent(gvPurchaseOrderLines, "Layout")
        CLH.AddSaveEvent(DataLayoutControl, "HideCustomization")
    End Sub

    Private Function LoadJobs() As IEnumerable(Of API.Job)
        Return API.Job.FindAllByState(API.JobState.Active)
    End Function

    Private Function LoadSuppliers() As IEnumerable(Of Helper.ActiveRecord.Evolution.Vendor)
        If Me.Record IsNot Nothing AndAlso Me.Record.Job IsNot Nothing Then
            Return From v As Helper.ActiveRecord.Evolution.Vendor In (From jl As API.JobLine In Me.Record.Job.JobLines Select jl.Supplier1).Union(From jl As API.JobLine In Me.Record.Job.JobLines Select jl.Supplier2) Select v Distinct
        End If
        Return Nothing
    End Function

    Private Sub SupplierLookUpEdit_EditValueChanged(sender As System.Object, e As System.EventArgs) Handles SupplierLookUpEdit.EditValueChanged
        If Me.Record IsNot Nothing AndAlso Me.Record.ID = 0 Then
            Me.Record.Supplier = SupplierLookUpEdit.EditValue
            Me.Record.PurchaseOrderLineList.Clear()
            For Each rl As API.PurchaseOrderLine In Me.Record.Job.GetPurchaseOrderLines(Me.Record.Supplier)
                Me.Record.PurchaseOrderLineList.Add(rl)
            Next
        End If
    End Sub

    Private Sub JobLookUpEdit_EditValueChanged(sender As System.Object, e As System.EventArgs) Handles JobLookUpEdit.EditValueChanged
        If Me.Record IsNot Nothing Then
            If Me.Record.ID = 0 Then
                Me.Record.Job = IIf(IsDBNull(JobLookUpEdit.EditValue), Nothing, JobLookUpEdit.EditValue)
                Try
                    SetNumbering()
                Catch ex As Exception
                    Setup.Log.logError("Error setting numbering.", ex)
                End Try
                Try
                    SetState()
                Catch ex As Exception
                    Setup.Log.logError("Error setting state.", ex)
                End Try
            End If
        End If
    End Sub

    Private Sub gvPurchaseOrderLines_CustomRowCellEdit(sender As System.Object, e As DevExpress.XtraGrid.Views.Grid.CustomRowCellEditEventArgs) Handles gvPurchaseOrderLines.CustomRowCellEdit
        If e.Column Is colQuantity Then
            Dim rl As API.PurchaseOrderLine = TryCast(gvPurchaseOrderLines.GetRow(e.RowHandle), API.PurchaseOrderLine)
            If rl IsNot Nothing Then
                Dim remainder As Double = (IIf(rl.JobLine.QuantitySupplier1.HasValue, rl.JobLine.QuantitySupplier1, 0) + IIf(rl.JobLine.QuantitySupplier2.HasValue, rl.JobLine.QuantitySupplier2, 0))
                If rl.JobLine.QuantitySupplierOrdered.HasValue Then
                    remainder -= rl.JobLine.QuantitySupplierOrdered
                End If
                CType(e.RepositoryItem, DevExpress.XtraEditors.Repository.RepositoryItemSpinEdit).MaxValue = remainder
            End If
        End If
    End Sub

   

   
End Class

Public Class xaegPurchaseOrder
    Inherits UniSource.Helper.ActiveRecord.xfAddEdit(Of API.PurchaseOrder)

    Public Sub New()
        Me.FormBorderStyle = Windows.Forms.FormBorderStyle.Sizable
    End Sub

End Class