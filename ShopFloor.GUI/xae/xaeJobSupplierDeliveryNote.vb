Imports UniSource
Imports DevExpress.XtraReports.UI

Public Class xaeJobSupplierDeliveryNote
    Inherits xaegJobSupplierDeliveryNote

    Private Sub GroupControl1_Paint(sender As System.Object, e As System.Windows.Forms.PaintEventArgs)

    End Sub

    Private Sub GroupControl2_Paint(sender As System.Object, e As System.Windows.Forms.PaintEventArgs)

    End Sub

    Private Sub LabelControl4_Click(sender As System.Object, e As System.EventArgs)

    End Sub

    Private Sub xaeJobSupplierDeliveryNote_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load

        Try
            Dim cbl As New Helper.GUI.LookupBackgroundLoader(Of UniSource.Helper.ActiveRecord.Evolution.Vendor)(SupplierLookUpEdit, AddressOf LoadVendors, False)
        Catch ex As Exception
            Setup.Log.logError("Error setting loader for JobSuppliers.", ex)
        End Try

        Try
            Dim cbl As New Helper.GUI.LookupBackgroundLoader(Of Pastel.Evolution.Agent)(ResponsibleAgentIDLookUpEdit, AddressOf LoadAgents, False)
        Catch ex As Exception
            Setup.Log.logError("Error setting loader for Responsible Agent.", ex)
        End Try

        Try
            SetState()
        Catch ex As Exception
            Setup.Log.logError("Error setting state.", ex)
        End Try

        Try
            SetNumbering()
        Catch ex As Exception
            Setup.Log.logError("Error setting numbering")
        End Try

        lDelivered.Text = Me.Record.Job.SupplierQuantityDelivered.Value
        lOutstanding.Text = Me.Record.Job.Quantity - Me.Record.Job.SupplierQuantityDelivered.Value

    End Sub


    Private Function LoadAgents() As IList(Of Pastel.Evolution.Agent)
        Setup.EvolutionHelper.ActivateEvolution()
        Return API.Job.GetAgents()
        End
    End Function

    Private Function LoadVendors() As IEnumerable(Of UniSource.Helper.ActiveRecord.Evolution.Vendor)
        'Dim vendorcrit = NHibernate.Criterion.DetachedCriteria.For(Of UniSource.Helper.ActiveRecord.Evolution.Vendor)()
        Return UniSource.Helper.ActiveRecord.Evolution.Vendor.FindAllByProperty("OnHold", False)
    End Function

    Private Sub SetState()
        ResponsibleAgentIDLookUpEdit.Properties.ReadOnly = False

        If Me.Record.DeliveryNumber IsNot Nothing Then
            SupplierLookUpEdit.Properties.ReadOnly = True
            QuantitySpinEdit.Properties.ReadOnly = True
            QuantitySpinEdit.Properties.ReadOnly = True
            ResponsibleAgentIDLookUpEdit.Properties.ReadOnly = False
            SpecialInstructions1TextEdit.Properties.ReadOnly = False
            SpecialInstructions2TextEdit.Properties.ReadOnly = False
        Else
            SupplierLookUpEdit.Properties.ReadOnly = False
            QuantitySpinEdit.Properties.ReadOnly = False
            ResponsibleAgentIDLookUpEdit.Properties.ReadOnly = False
            SpecialInstructions1TextEdit.Properties.ReadOnly = False
            SpecialInstructions2TextEdit.Properties.ReadOnly = False
        End If

        If Me.Record.Quantity > 0 Then
            SupplierLookUpEdit.Properties.ReadOnly = True
        ElseIf Me.Record.Quantity Is Nothing Or Me.Record.Quantity = 0 Then
            SupplierLookUpEdit.Properties.ReadOnly = False

        End If
    End Sub

    Private Sub SetNumbering()
        If Me.Record.ID = 0 Then
            Me.Record.DeliveryDate = Today.Date
            Me.Record.AgentID = Setup.Agent.ID
            Me.Record.ResponsibleAgent = Setup.Agent.ID
            Me.Record.Attention = ""
            Me.Record.SpecialInstructions1 = ""
            Me.Record.SpecialInstructions2 = ""

            Dim jobQuantity As Integer? = Me.Record.Job.Quantity

            If Record.ID IsNot Nothing Then
                Record.Job.SupplierQuantityDelivered.ToString()
                Dim remainder As Integer? = IIf(Record.Job.SupplierQuantityDelivered.HasValue, Record.Job.SupplierQuantityDelivered, 0)
                If Record.Job.SupplierQuantityDelivered.HasValue Then
                    remainder = jobQuantity - Record.Job.SupplierQuantityDelivered
                End If
                Me.Record.Quantity = remainder
             End If
            If IIf(API.Context.Defaults.isSupplierDeliveryNoteNumberAutoGenerated.HasValue, API.Context.Defaults.isSupplierDeliveryNoteNumberAutoGenerated, False) Then
                dnNumberTextEdit.Properties.ReadOnly = True
                Me.Record.DeliveryNumber = API.Defaults.Defaults.GetNextSupplierDeliveryNumber(Record.Job) + " *"
            Else
                dnNumberTextEdit.Properties.ReadOnly = False
            End If
        Else
            dnNumberTextEdit.Properties.ReadOnly = True
        End If

    End Sub



    Protected Overrides Sub SaveRecord()
        Dim Quantity As Integer? = Val(QuantitySpinEdit.EditValue)
        Dim rjq As Integer? = Record.Job.SupplierQuantityDelivered

        If IIf(API.Context.Defaults.isSupplierDeliveryNoteNumberAutoGenerated.HasValue, API.Context.Defaults.isSupplierDeliveryNoteNumberAutoGenerated, False) Then
            dnNumberTextEdit.Properties.ReadOnly = True
            Me.Record.DeliveryNumber = API.Defaults.Defaults.GetNextSupplierDeliveryNumber(Record.Job)
        End If
        MyBase.SaveRecord()
        If Me.Record.IsValid Then
            PrintSDN()
        End If
    End Sub


    Private Sub PrintSDN()
        Try
            'Dim lay As New UniSource.ReportManager.xfReportRunner(New xrDoscoPO, API.PurchaseOrder.PrintPO)
            ' Dim lay As New UniSource.ReportManager.xfReportRunner(New xrDoscoJobSupplierDeliveryNote, Me.Record)
            ''D=im lay As New UniSource.ReportManager.xfReportRunner(New xrDoscoJobSupplierDeliveryNote, Me.Record)

            ' Me.Record.Vendor = UniSource.Helper.ActiveRecord.Evolution.Vendor.FindAllByProperty("ID", SupplierLookUpEdit.EditValue)


            Dim rp As UniSource.ShopFloor.Report.xrDoscoJobSupplierDeliveryNote = New UniSource.ShopFloor.Report.xrDoscoJobSupplierDeliveryNote
            rp.JobSupplierDelivery.DataSource = Me.Record
            rp.ShowPreview()
        Catch ex As Exception
            Setup.Log.logError("Error running report.", ex)

        End Try
    End Sub


End Class

Public Class xaegJobSupplierDeliveryNote
    Inherits Helper.ActiveRecord.xfAddEdit(Of API.JobSupplierDeliveryNote)

End Class
