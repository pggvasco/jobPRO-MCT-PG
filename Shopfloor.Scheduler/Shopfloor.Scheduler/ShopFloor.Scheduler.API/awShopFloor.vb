'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports Castle.ActiveRecord
Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.ComponentModel


<Serializable()>  _
Partial Public MustInherit Class ActivityBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Activity)
    
    Private _estimatedStartDate As System.Nullable(Of Date)
    
    Private _estimatedDuration As System.Nullable(Of Double)
    
    Private _estimatedElapsedDuration As System.Nullable(Of Double)
    
    Private _actualStartDate As System.Nullable(Of Date)
    
    Private _actualDuration As System.Nullable(Of Double)
    
    Private _actualElapsedDuration As System.Nullable(Of Double)
    
    Private _sequence As System.Nullable(Of Integer)
    
    Private _estimatedArtisanCost As System.Nullable(Of Double)
    
    Private _estimatedMachineCost As System.Nullable(Of Double)
    
    Private _estimatedOperationCost As System.Nullable(Of Double)
    
    Private _actualArtisanCost As System.Nullable(Of Double)
    
    Private _actualMachineCost As System.Nullable(Of Double)
    
    Private _actualOperationCost As System.Nullable(Of Double)
    
    Private _isActualsPosted As System.Nullable(Of Boolean)
    
    Private _description As String
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _activityLogs As IList(Of ActivityLog) = New List(Of ActivityLog)()
    
    Private _artisan As Artisan
    
    Private _job As Job
    
    Private _machine As Machine
    
    Private _operation As Operation
    
    Private _part As Part
    
    <[Property]("EstimatedStartDate", ColumnType:="DateTime")>  _
    Public Overridable Property EstimatedStartDate() As System.Nullable(Of Date)
        Get
            Return Me._estimatedStartDate
        End Get
        Set
            If ((_estimatedStartDate <> value)  _
                        Or (_estimatedStartDate Is Nothing)) Then
                Me._estimatedStartDate = value
                Me.NotifyPropertyChanged("EstimatedStartDate")
            End If
        End Set
    End Property
    
    <[Property]("EstimatedDuration", ColumnType:="Double")>  _
    Public Overridable Property EstimatedDuration() As System.Nullable(Of Double)
        Get
            Return Me._estimatedDuration
        End Get
        Set
            If ((_estimatedDuration <> value)  _
                        Or (_estimatedDuration Is Nothing)) Then
                Me._estimatedDuration = value
                Me.NotifyPropertyChanged("EstimatedDuration")
            End If
        End Set
    End Property
    
    <[Property]("EstimatedElapsedDuration", ColumnType:="Double")>  _
    Public Overridable Property EstimatedElapsedDuration() As System.Nullable(Of Double)
        Get
            Return Me._estimatedElapsedDuration
        End Get
        Set
            If ((_estimatedElapsedDuration <> value)  _
                        Or (_estimatedElapsedDuration Is Nothing)) Then
                Me._estimatedElapsedDuration = value
                Me.NotifyPropertyChanged("EstimatedElapsedDuration")
            End If
        End Set
    End Property
    
    <[Property]("ActualStartDate", ColumnType:="DateTime")>  _
    Public Overridable Property ActualStartDate() As System.Nullable(Of Date)
        Get
            Return Me._actualStartDate
        End Get
        Set
            If ((_actualStartDate <> value)  _
                        Or (_actualStartDate Is Nothing)) Then
                Me._actualStartDate = value
                Me.NotifyPropertyChanged("ActualStartDate")
            End If
        End Set
    End Property
    
    <[Property]("ActualDuration", ColumnType:="Double")>  _
    Public Overridable Property ActualDuration() As System.Nullable(Of Double)
        Get
            Return Me._actualDuration
        End Get
        Set
            If ((_actualDuration <> value)  _
                        Or (_actualDuration Is Nothing)) Then
                Me._actualDuration = value
                Me.NotifyPropertyChanged("ActualDuration")
            End If
        End Set
    End Property
    
    <[Property]("ActualElapsedDuration", ColumnType:="Double")>  _
    Public Overridable Property ActualElapsedDuration() As System.Nullable(Of Double)
        Get
            Return Me._actualElapsedDuration
        End Get
        Set
            If ((_actualElapsedDuration <> value)  _
                        Or (_actualElapsedDuration Is Nothing)) Then
                Me._actualElapsedDuration = value
                Me.NotifyPropertyChanged("ActualElapsedDuration")
            End If
        End Set
    End Property
    
    <[Property]("Sequence", ColumnType:="Int32")>  _
    Public Overridable Property Sequence() As System.Nullable(Of Integer)
        Get
            Return Me._sequence
        End Get
        Set
            If ((_sequence <> value)  _
                        Or (_sequence Is Nothing)) Then
                Me._sequence = value
                Me.NotifyPropertyChanged("Sequence")
            End If
        End Set
    End Property
    
    <[Property]("EstimatedArtisanCost", ColumnType:="Double")>  _
    Public Overridable Property EstimatedArtisanCost() As System.Nullable(Of Double)
        Get
            Return Me._estimatedArtisanCost
        End Get
        Set
            If ((_estimatedArtisanCost <> value)  _
                        Or (_estimatedArtisanCost Is Nothing)) Then
                Me._estimatedArtisanCost = value
                Me.NotifyPropertyChanged("EstimatedArtisanCost")
            End If
        End Set
    End Property
    
    <[Property]("EstimatedMachineCost", ColumnType:="Double")>  _
    Public Overridable Property EstimatedMachineCost() As System.Nullable(Of Double)
        Get
            Return Me._estimatedMachineCost
        End Get
        Set
            If ((_estimatedMachineCost <> value)  _
                        Or (_estimatedMachineCost Is Nothing)) Then
                Me._estimatedMachineCost = value
                Me.NotifyPropertyChanged("EstimatedMachineCost")
            End If
        End Set
    End Property
    
    <[Property]("EstimatedOperationCost", ColumnType:="Double")>  _
    Public Overridable Property EstimatedOperationCost() As System.Nullable(Of Double)
        Get
            Return Me._estimatedOperationCost
        End Get
        Set
            If ((_estimatedOperationCost <> value)  _
                        Or (_estimatedOperationCost Is Nothing)) Then
                Me._estimatedOperationCost = value
                Me.NotifyPropertyChanged("EstimatedOperationCost")
            End If
        End Set
    End Property
    
    <[Property]("ActualArtisanCost", ColumnType:="Double")>  _
    Public Overridable Property ActualArtisanCost() As System.Nullable(Of Double)
        Get
            Return Me._actualArtisanCost
        End Get
        Set
            If ((_actualArtisanCost <> value)  _
                        Or (_actualArtisanCost Is Nothing)) Then
                Me._actualArtisanCost = value
                Me.NotifyPropertyChanged("ActualArtisanCost")
            End If
        End Set
    End Property
    
    <[Property]("ActualMachineCost", ColumnType:="Double")>  _
    Public Overridable Property ActualMachineCost() As System.Nullable(Of Double)
        Get
            Return Me._actualMachineCost
        End Get
        Set
            If ((_actualMachineCost <> value)  _
                        Or (_actualMachineCost Is Nothing)) Then
                Me._actualMachineCost = value
                Me.NotifyPropertyChanged("ActualMachineCost")
            End If
        End Set
    End Property
    
    <[Property]("ActualOperationCost", ColumnType:="Double")>  _
    Public Overridable Property ActualOperationCost() As System.Nullable(Of Double)
        Get
            Return Me._actualOperationCost
        End Get
        Set
            If ((_actualOperationCost <> value)  _
                        Or (_actualOperationCost Is Nothing)) Then
                Me._actualOperationCost = value
                Me.NotifyPropertyChanged("ActualOperationCost")
            End If
        End Set
    End Property
    
    <[Property]("IsActualsPosted", ColumnType:="Boolean")>  _
    Public Overridable Property IsActualsPosted() As System.Nullable(Of Boolean)
        Get
            Return Me._isActualsPosted
        End Get
        Set
            If ((_isActualsPosted <> value)  _
                        Or (_isActualsPosted Is Nothing)) Then
                Me._isActualsPosted = value
                Me.NotifyPropertyChanged("IsActualsPosted")
            End If
        End Set
    End Property
    
    <[Property]("Description", ColumnType:="String")>  _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set
            If ((_description <> value)  _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property
    
    <Xml.Serialization.XmlIgnore(),  _
     HasMany(GetType(ActivityLog), ColumnKey:="ActivityID", Lazy:=true, Table:="ussSSActivityLog")>  _
    Friend Property ActivityLogs() As IList(Of ActivityLog)
        Get
            Return Me._activityLogs
        End Get
        Set
            Me._activityLogs = value
        End Set
    End Property
    
    <BelongsTo("ArtisanID")>  _
    Public Overridable Property Artisan() As Artisan
        Get
            Return Me._artisan
        End Get
        Set
            If ((_artisan <> value)  _
                        Or (_artisan Is Nothing)) Then
                Me._artisan = value
                Me.NotifyPropertyChanged("Artisan")
            End If
        End Set
    End Property
    
    <BelongsTo("JobID")>  _
    Public Overridable Property Job() As Job
        Get
            Return Me._job
        End Get
        Set
            If ((_job <> value)  _
                        Or (_job Is Nothing)) Then
                Me._job = value
                Me.NotifyPropertyChanged("Job")
            End If
        End Set
    End Property
    
    <BelongsTo("MachineID")>  _
    Public Overridable Property Machine() As Machine
        Get
            Return Me._machine
        End Get
        Set
            If ((_machine <> value)  _
                        Or (_machine Is Nothing)) Then
                Me._machine = value
                Me.NotifyPropertyChanged("Machine")
            End If
        End Set
    End Property
    
    <BelongsTo("OperationID")>  _
    Public Overridable Property Operation() As Operation
        Get
            Return Me._operation
        End Get
        Set
            If ((_operation <> value)  _
                        Or (_operation Is Nothing)) Then
                Me._operation = value
                Me.NotifyPropertyChanged("Operation")
            End If
        End Set
    End Property
    
    <BelongsTo("PartID")>  _
    Public Overridable Property Part() As Part
        Get
            Return Me._part
        End Get
        Set
            If ((_part <> value)  _
                        Or (_part Is Nothing)) Then
                Me._part = value
                Me.NotifyPropertyChanged("Part")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSActivity", Schema:="dbo")>  _
Partial Public Class Activity
    Inherits ActivityBase
End Class

<Serializable()>  _
Partial Public MustInherit Class PartBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Part)
    
    Private _code As String
    
    Private _description As String
    
    Private _dBColour As String
    
    Private _image() As Byte
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _activities As IList(Of Activity) = New List(Of Activity)()
    
    <[Property]("Code", ColumnType:="String")>  _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set
            If ((_code <> value)  _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property
    
    <[Property]("Description", ColumnType:="String")>  _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set
            If ((_description <> value)  _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property
    
    <[Property]("Colour", ColumnType:="String")>  _
    Protected Overridable Property DBColour() As String
        Get
            Return Me._dBColour
        End Get
        Set
            If ((_dBColour <> value)  _
                        Or (_dBColour Is Nothing)) Then
                Me._dBColour = value
                Me.NotifyPropertyChanged("DBColour")
            End If
        End Set
    End Property
    
    <[Property]("Image", ColumnType:="BinaryBlob")>  _
    Public Overridable Property Image() As Byte()
        Get
            Return Me._image
        End Get
        Set
            If ((_image Is Value) _
                        Or (_image Is Nothing)) Then
                Me._image = Value
                Me.NotifyPropertyChanged("Image")
            End If
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Activity), ColumnKey:="PartID", Lazy:=True, Table:="ussSSActivity")> _
    Friend Property Activities() As IList(Of Activity)
        Get
            Return Me._activities
        End Get
        Set(ByVal value As IList(Of Activity))
            Me._activities = value
        End Set
    End Property
End Class

<ActiveRecord("ussSSPart", Schema:="dbo")> _
Partial Public Class Part
    Inherits PartBase
End Class

<Serializable()> _
Partial Public MustInherit Class ActivityLogBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of ActivityLog)

    Private _startDate As System.Nullable(Of Date)

    Private _duration As System.Nullable(Of Double)

    Private _currentState As ControlScan

    Private _artisanCost As System.Nullable(Of Double)

    Private _machineCost As System.Nullable(Of Double)

    Private _operationCost As System.Nullable(Of Double)

    Private _logTime As System.Nullable(Of Date)

    Private _activity As Activity

    Private _artisan As Artisan

    Private _machine As Machine

    Private _reasonCodeActivityLogs As ReasonCode

    <[Property]("StartDate", ColumnType:="DateTime")> _
    Public Overridable Property StartDate() As System.Nullable(Of Date)
        Get
            Return Me._startDate
        End Get
        Set(ByVal value As System.Nullable(Of Date))
            If ((_startDate <> value) _
                        Or (_startDate Is Nothing)) Then
                Me._startDate = value
                Me.NotifyPropertyChanged("StartDate")
            End If
        End Set
    End Property

    <[Property]("Duration", ColumnType:="Double")> _
    Public Overridable Property Duration() As System.Nullable(Of Double)
        Get
            Return Me._duration
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_duration <> value) _
                        Or (_duration Is Nothing)) Then
                Me._duration = value
                Me.NotifyPropertyChanged("Duration")
            End If
        End Set
    End Property

    <[Property]("CurrentState", ColumnType:="Int32")> _
    Public Overridable Property CurrentState() As ControlScan
        Get
            Return Me._currentState
        End Get
        Set(ByVal value As ControlScan)
            If ((_currentState <> value) _
                        Or (_currentState <> Nothing)) Then
                Me._currentState = value
                Me.NotifyPropertyChanged("CurrentState")
            End If
        End Set
    End Property

    <[Property]("ArtisanCost", ColumnType:="Double")> _
    Public Overridable Property ArtisanCost() As System.Nullable(Of Double)
        Get
            Return Me._artisanCost
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_artisanCost <> value) _
                        Or (_artisanCost Is Nothing)) Then
                Me._artisanCost = value
                Me.NotifyPropertyChanged("ArtisanCost")
            End If
        End Set
    End Property

    <[Property]("MachineCost", ColumnType:="Double")> _
    Public Overridable Property MachineCost() As System.Nullable(Of Double)
        Get
            Return Me._machineCost
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_machineCost <> value) _
                        Or (_machineCost Is Nothing)) Then
                Me._machineCost = value
                Me.NotifyPropertyChanged("MachineCost")
            End If
        End Set
    End Property

    <[Property]("OperationCost", ColumnType:="Double")> _
    Public Overridable Property OperationCost() As System.Nullable(Of Double)
        Get
            Return Me._operationCost
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_operationCost <> value) _
                        Or (_operationCost Is Nothing)) Then
                Me._operationCost = value
                Me.NotifyPropertyChanged("OperationCost")
            End If
        End Set
    End Property

    <[Property]("LogTime", ColumnType:="DateTime")> _
    Public Overridable Property LogTime() As System.Nullable(Of Date)
        Get
            Return Me._logTime
        End Get
        Set(ByVal value As System.Nullable(Of Date))
            If ((_logTime <> value) _
                        Or (_logTime Is Nothing)) Then
                Me._logTime = value
                Me.NotifyPropertyChanged("LogTime")
            End If
        End Set
    End Property

    <BelongsTo("ActivityID")> _
    Public Overridable Property Activity() As Activity
        Get
            Return Me._activity
        End Get
        Set(ByVal value As Activity)
            If ((_activity <> value) _
                        Or (_activity Is Nothing)) Then
                Me._activity = value
                Me.NotifyPropertyChanged("Activity")
            End If
        End Set
    End Property

    <BelongsTo("ArtisanID")> _
    Public Overridable Property Artisan() As Artisan
        Get
            Return Me._artisan
        End Get
        Set(ByVal value As Artisan)
            If ((_artisan <> value) _
                        Or (_artisan Is Nothing)) Then
                Me._artisan = value
                Me.NotifyPropertyChanged("Artisan")
            End If
        End Set
    End Property

    <BelongsTo("MachineID")> _
    Public Overridable Property Machine() As Machine
        Get
            Return Me._machine
        End Get
        Set(ByVal value As Machine)
            If ((_machine <> value) _
                        Or (_machine Is Nothing)) Then
                Me._machine = value
                Me.NotifyPropertyChanged("Machine")
            End If
        End Set
    End Property

    <BelongsTo("ReasonCodeID")> _
    Public Overridable Property ReasonCodeActivityLogs() As ReasonCode
        Get
            Return Me._reasonCodeActivityLogs
        End Get
        Set(ByVal value As ReasonCode)
            If ((_reasonCodeActivityLogs <> value) _
                        Or (_reasonCodeActivityLogs Is Nothing)) Then
                Me._reasonCodeActivityLogs = value
                Me.NotifyPropertyChanged("ReasonCodeActivityLogs")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSActivityLog", Schema:="dbo")> _
Partial Public Class ActivityLog
    Inherits ActivityLogBase
End Class

<Serializable()> _
Partial Public MustInherit Class ArtisanBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Artisan)

    Private _code As String

    Private _description As String

    Private _dBColour As String

    Private _image() As Byte

    Private _rate As System.Nullable(Of Double)

    Private _calendarID As System.Nullable(Of Integer)

    Private _serviceCode As String

    Private _isPrimary As System.Nullable(Of Boolean)

    <Xml.Serialization.XmlIgnore()> _
    Private _activities As IList(Of Activity) = New List(Of Activity)()

    <Xml.Serialization.XmlIgnore()> _
    Private _activityLogs As IList(Of ActivityLog) = New List(Of ActivityLog)()

    <Xml.Serialization.XmlIgnore()> _
    Private _logonLogs As IList(Of LogonLog) = New List(Of LogonLog)()

    <Xml.Serialization.XmlIgnore()> _
    Private _machineChecklistLogs As IList(Of MachineChecklistLog) = New List(Of MachineChecklistLog)()

    <Xml.Serialization.XmlIgnore()> _
    Private _operationChecklistLogs As IList(Of OperationChecklistLog) = New List(Of OperationChecklistLog)()

    <Xml.Serialization.XmlIgnore()> _
    Private _operationArtisans As IList(Of OperationArtisan) = New List(Of OperationArtisan)()

    <Xml.Serialization.XmlIgnore()> _
    Private _machineArtisans As IList(Of MachineArtisan) = New List(Of MachineArtisan)()

    Private _costCentre As CostCentre

    <[Property]("Code", ColumnType:="String")> _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set(ByVal value As String)
            If ((_code <> value) _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property

    <[Property]("Description", ColumnType:="String")> _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set(ByVal value As String)
            If ((_description <> value) _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property

    <[Property]("Colour", ColumnType:="String")> _
    Protected Overridable Property DBColour() As String
        Get
            Return Me._dBColour
        End Get
        Set(ByVal value As String)
            If ((_dBColour <> value) _
                        Or (_dBColour Is Nothing)) Then
                Me._dBColour = value
                Me.NotifyPropertyChanged("DBColour")
            End If
        End Set
    End Property

    <[Property]("Image", ColumnType:="BinaryBlob")> _
    Public Overridable Property Image() As Byte()
        Get
            Return Me._image
        End Get
        Set(ByVal value As Byte())
            If ((_image Is value) _
                        Or (_image Is Nothing)) Then
                Me._image = value
                Me.NotifyPropertyChanged("Image")
            End If
        End Set
    End Property

    <[Property]("Rate", ColumnType:="Double")> _
    Public Overridable Property Rate() As System.Nullable(Of Double)
        Get
            Return Me._rate
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_rate <> value) _
                        Or (_rate Is Nothing)) Then
                Me._rate = value
                Me.NotifyPropertyChanged("Rate")
            End If
        End Set
    End Property

    <[Property]("CalendarID", ColumnType:="Int32")> _
    Public Overridable Property CalendarID() As System.Nullable(Of Integer)
        Get
            Return Me._calendarID
        End Get
        Set(ByVal value As System.Nullable(Of Integer))
            If ((_calendarID <> value) _
                        Or (_calendarID Is Nothing)) Then
                Me._calendarID = value
                Me.NotifyPropertyChanged("CalendarID")
            End If
        End Set
    End Property

    <[Property]("ServiceCode", ColumnType:="String")> _
    Public Overridable Property ServiceCode() As String
        Get
            Return Me._serviceCode
        End Get
        Set(ByVal value As String)
            If ((_serviceCode <> value) _
                        Or (_serviceCode Is Nothing)) Then
                Me._serviceCode = value
                Me.NotifyPropertyChanged("ServiceCode")
            End If
        End Set
    End Property

    <[Property]("IsPrimary", ColumnType:="Boolean")> _
    Public Overridable Property IsPrimary() As System.Nullable(Of Boolean)
        Get
            Return Me._isPrimary
        End Get
        Set(ByVal value As System.Nullable(Of Boolean))
            If ((_isPrimary <> value) _
                        Or (_isPrimary Is Nothing)) Then
                Me._isPrimary = value
                Me.NotifyPropertyChanged("IsPrimary")
            End If
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Activity), ColumnKey:="ArtisanID", Lazy:=True, Table:="ussSSActivity")> _
    Friend Property Activities() As IList(Of Activity)
        Get
            Return Me._activities
        End Get
        Set(ByVal value As IList(Of Activity))
            Me._activities = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(ActivityLog), ColumnKey:="ArtisanID", Table:="ussSSActivityLog")> _
    Friend Property ActivityLogs() As IList(Of ActivityLog)
        Get
            Return Me._activityLogs
        End Get
        Set(ByVal value As IList(Of ActivityLog))
            Me._activityLogs = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(LogonLog), ColumnKey:="ArtisanID", Table:="ussSSLogonLog")> _
    Public Overridable Property LogonLogs() As IList(Of LogonLog)
        Get
            Return Me._logonLogs
        End Get
        Set(ByVal value As IList(Of LogonLog))
            Me._logonLogs = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(MachineChecklistLog), ColumnKey:="ArtisanID", Table:="ussSSMachineChecklistLog")> _
    Public Overridable Property MachineChecklistLogs() As IList(Of MachineChecklistLog)
        Get
            Return Me._machineChecklistLogs
        End Get
        Set(ByVal value As IList(Of MachineChecklistLog))
            Me._machineChecklistLogs = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(OperationChecklistLog), ColumnKey:="ArtisanID", Table:="ussSSOperationCheckListLog")> _
    Public Overridable Property OperationChecklistLogs() As IList(Of OperationChecklistLog)
        Get
            Return Me._operationChecklistLogs
        End Get
        Set(ByVal value As IList(Of OperationChecklistLog))
            Me._operationChecklistLogs = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(OperationArtisan), ColumnKey:="ArtisanID", Table:="ussSSOperationArtisans")> _
    Public Overridable Property OperationArtisans() As IList(Of OperationArtisan)
        Get
            Return Me._operationArtisans
        End Get
        Set(ByVal value As IList(Of OperationArtisan))
            Me._operationArtisans = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(MachineArtisan), ColumnKey:="ArtisanID", Table:="ussSSMachineArtisans")> _
    Public Overridable Property MachineArtisans() As IList(Of MachineArtisan)
        Get
            Return Me._machineArtisans
        End Get
        Set(ByVal value As IList(Of MachineArtisan))
            Me._machineArtisans = value
        End Set
    End Property

    <BelongsTo("CostCentreID")> _
    Public Overridable Property CostCentre() As CostCentre
        Get
            Return Me._costCentre
        End Get
        Set(ByVal value As CostCentre)
            If ((_costCentre <> value) _
                        Or (_costCentre Is Nothing)) Then
                Me._costCentre = value
                Me.NotifyPropertyChanged("CostCentre")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSArtisan", Schema:="dbo")> _
Partial Public Class Artisan
    Inherits ArtisanBase
End Class

<Serializable()> _
Partial Public MustInherit Class ConfigurationBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Configuration)

    Private _rateMethod As RateMethod

    Private _costCentreMethod As CostCentreMethod

    <[Property]("RateMethod", ColumnType:="Int32")> _
    Public Overridable Property RateMethod() As RateMethod
        Get
            Return Me._rateMethod
        End Get
        Set(ByVal value As RateMethod)
            If ((_rateMethod <> value) _
                        Or (_rateMethod <> Nothing)) Then
                Me._rateMethod = value
                Me.NotifyPropertyChanged("RateMethod")
            End If
        End Set
    End Property

    <[Property]("CostCentreMethod", ColumnType:="Int32")> _
    Public Overridable Property CostCentreMethod() As CostCentreMethod
        Get
            Return Me._costCentreMethod
        End Get
        Set(ByVal value As CostCentreMethod)
            If ((_costCentreMethod <> value) _
                        Or (_costCentreMethod <> Nothing)) Then
                Me._costCentreMethod = value
                Me.NotifyPropertyChanged("CostCentreMethod")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSConfiguration", Schema:="dbo")> _
Partial Public Class Configuration
    Inherits ConfigurationBase
End Class

<Serializable()> _
Partial Public MustInherit Class CostCentreBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of CostCentre)

    Private _code As String

    Private _description As String

    Private _transactionCode As String

    <Xml.Serialization.XmlIgnore()> _
    Private _artisans As IList(Of Artisan) = New List(Of Artisan)()

    <Xml.Serialization.XmlIgnore()> _
    Private _machines As IList(Of Machine) = New List(Of Machine)()

    <Xml.Serialization.XmlIgnore()> _
    Private _operations As IList(Of Operation) = New List(Of Operation)()

    <[Property]("Code", ColumnType:="String")> _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set(ByVal value As String)
            If ((_code <> value) _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property

    <[Property]("Description", ColumnType:="String")> _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set(ByVal value As String)
            If ((_description <> value) _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property

    <[Property]("TransactionCode", ColumnType:="String")> _
    Public Overridable Property TransactionCode() As String
        Get
            Return Me._transactionCode
        End Get
        Set(ByVal value As String)
            If ((_transactionCode <> value) _
                        Or (_transactionCode Is Nothing)) Then
                Me._transactionCode = value
                Me.NotifyPropertyChanged("TransactionCode")
            End If
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Artisan), ColumnKey:="CostCentreID", Table:="ussSSArtisan")> _
    Friend Property Artisans() As IList(Of Artisan)
        Get
            Return Me._artisans
        End Get
        Set(ByVal value As IList(Of Artisan))
            Me._artisans = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Machine), ColumnKey:="CostCentreID", Table:="ussSSMachine")> _
    Friend Property Machines() As IList(Of Machine)
        Get
            Return Me._machines
        End Get
        Set(ByVal value As IList(Of Machine))
            Me._machines = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Operation), ColumnKey:="CostCentreID", Table:="ussSSOperation")> _
    Friend Property Operations() As IList(Of Operation)
        Get
            Return Me._operations
        End Get
        Set(ByVal value As IList(Of Operation))
            Me._operations = value
        End Set
    End Property
End Class

<ActiveRecord("ussSSCostCentre", Schema:="dbo")> _
Partial Public Class CostCentre
    Inherits CostCentreBase
End Class

<Serializable()> _
Partial Public MustInherit Class CustomerBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Customer)

    Private _code As String

    Private _description As String

    Private _dBColour As String

    Private _image() As Byte

    <Xml.Serialization.XmlIgnore()> _
    Private _jobs As IList(Of Job) = New List(Of Job)()

    <[Property]("Code", ColumnType:="String")> _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set(ByVal value As String)
            If ((_code <> value) _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property

    <[Property]("Description", ColumnType:="String")> _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set(ByVal value As String)
            If ((_description <> value) _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property

    <[Property]("Colour", ColumnType:="String")> _
    Protected Overridable Property DBColour() As String
        Get
            Return Me._dBColour
        End Get
        Set(ByVal value As String)
            If ((_dBColour <> value) _
                        Or (_dBColour Is Nothing)) Then
                Me._dBColour = value
                Me.NotifyPropertyChanged("DBColour")
            End If
        End Set
    End Property

    <[Property]("Image", ColumnType:="BinaryBlob")> _
    Public Overridable Property Image() As Byte()
        Get
            Return Me._image
        End Get
        Set(ByVal value As Byte())
            If ((_image Is value) _
                        Or (_image Is Nothing)) Then
                Me._image = value
                Me.NotifyPropertyChanged("Image")
            End If
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Job), ColumnKey:="CustomerID", Table:="ussSSJob")> _
    Friend Property Jobs() As IList(Of Job)
        Get
            Return Me._jobs
        End Get
        Set(ByVal value As IList(Of Job))
            Me._jobs = value
        End Set
    End Property
End Class

<ActiveRecord("ussSSCustomer", Schema:="dbo")> _
Partial Public Class Customer
    Inherits CustomerBase
End Class

<Serializable()> _
Partial Public MustInherit Class JobBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Job)

    Private _number As String

    Private _description As String

    Private _jobDate As String

    Private _requiredDeliveryDate As System.Nullable(Of Date)

    Private _estimatedDeliveryDate As System.Nullable(Of Date)

    Private _orderPrice As System.Nullable(Of Double)

    Private _totalCost As System.Nullable(Of Double)

    Private _estimatedStartDate As System.Nullable(Of Date)

    Private _estimatedEndDate As System.Nullable(Of Date)

    Private _actualStartDate As System.Nullable(Of Date)

    Private _actualEndDate As System.Nullable(Of Date)

    Private _jobCardID As System.Nullable(Of Integer)

    <Xml.Serialization.XmlIgnore()> _
    Private _activities As IList(Of Activity) = New List(Of Activity)()

    Private _customer As Customer

    Private _drawingJobs As Drawings

    <[Property]("Number", ColumnType:="String")> _
    Public Overridable Property Number() As String
        Get
            Return Me._number
        End Get
        Set(ByVal value As String)
            If ((_number <> value) _
                        Or (_number Is Nothing)) Then
                Me._number = value
                Me.NotifyPropertyChanged("Number")
            End If
        End Set
    End Property

    <[Property]("Description", ColumnType:="String")> _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set(ByVal value As String)
            If ((_description <> value) _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property

    <[Property]("JobDate", ColumnType:="String")> _
    Public Overridable Property JobDate() As String
        Get
            Return Me._jobDate
        End Get
        Set(ByVal value As String)
            If ((_jobDate <> value) _
                        Or (_jobDate Is Nothing)) Then
                Me._jobDate = value
                Me.NotifyPropertyChanged("JobDate")
            End If
        End Set
    End Property

    <[Property]("RequiredDeliveryDate", ColumnType:="DateTime")> _
    Public Overridable Property RequiredDeliveryDate() As System.Nullable(Of Date)
        Get
            Return Me._requiredDeliveryDate
        End Get
        Set(ByVal value As System.Nullable(Of Date))
            If ((_requiredDeliveryDate <> value) _
                        Or (_requiredDeliveryDate Is Nothing)) Then
                Me._requiredDeliveryDate = value
                Me.NotifyPropertyChanged("RequiredDeliveryDate")
            End If
        End Set
    End Property

    <[Property]("EstimatedDeliveryDate", ColumnType:="DateTime")> _
    Public Overridable Property EstimatedDeliveryDate() As System.Nullable(Of Date)
        Get
            Return Me._estimatedDeliveryDate
        End Get
        Set(ByVal value As System.Nullable(Of Date))
            If ((_estimatedDeliveryDate <> value) _
                        Or (_estimatedDeliveryDate Is Nothing)) Then
                Me._estimatedDeliveryDate = value
                Me.NotifyPropertyChanged("EstimatedDeliveryDate")
            End If
        End Set
    End Property

    <[Property]("OrderPrice", ColumnType:="Double")> _
    Public Overridable Property OrderPrice() As System.Nullable(Of Double)
        Get
            Return Me._orderPrice
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_orderPrice <> value) _
                        Or (_orderPrice Is Nothing)) Then
                Me._orderPrice = value
                Me.NotifyPropertyChanged("OrderPrice")
            End If
        End Set
    End Property

    <[Property]("TotalCost", ColumnType:="Double")> _
    Public Overridable Property TotalCost() As System.Nullable(Of Double)
        Get
            Return Me._totalCost
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_totalCost <> value) _
                        Or (_totalCost Is Nothing)) Then
                Me._totalCost = value
                Me.NotifyPropertyChanged("TotalCost")
            End If
        End Set
    End Property

    <[Property]("EstimatedStartDate", ColumnType:="DateTime")> _
    Public Overridable Property EstimatedStartDate() As System.Nullable(Of Date)
        Get
            Return Me._estimatedStartDate
        End Get
        Set(ByVal value As System.Nullable(Of Date))
            If ((_estimatedStartDate <> value) _
                        Or (_estimatedStartDate Is Nothing)) Then
                Me._estimatedStartDate = value
                Me.NotifyPropertyChanged("EstimatedStartDate")
            End If
        End Set
    End Property

    <[Property]("EstimatedEndDate", ColumnType:="DateTime")> _
    Public Overridable Property EstimatedEndDate() As System.Nullable(Of Date)
        Get
            Return Me._estimatedEndDate
        End Get
        Set(ByVal value As System.Nullable(Of Date))
            If ((_estimatedEndDate <> value) _
                        Or (_estimatedEndDate Is Nothing)) Then
                Me._estimatedEndDate = value
                Me.NotifyPropertyChanged("EstimatedEndDate")
            End If
        End Set
    End Property

    <[Property]("ActualStartDate", ColumnType:="DateTime")> _
    Public Overridable Property ActualStartDate() As System.Nullable(Of Date)
        Get
            Return Me._actualStartDate
        End Get
        Set(ByVal value As System.Nullable(Of Date))
            If ((_actualStartDate <> value) _
                        Or (_actualStartDate Is Nothing)) Then
                Me._actualStartDate = value
                Me.NotifyPropertyChanged("ActualStartDate")
            End If
        End Set
    End Property

    <[Property]("ActualEndDate", ColumnType:="DateTime")> _
    Public Overridable Property ActualEndDate() As System.Nullable(Of Date)
        Get
            Return Me._actualEndDate
        End Get
        Set(ByVal value As System.Nullable(Of Date))
            If ((_actualEndDate <> value) _
                        Or (_actualEndDate Is Nothing)) Then
                Me._actualEndDate = value
                Me.NotifyPropertyChanged("ActualEndDate")
            End If
        End Set
    End Property

    <[Property]("JobCardID", ColumnType:="Int32")> _
    Public Overridable Property JobCardID() As System.Nullable(Of Integer)
        Get
            Return Me._jobCardID
        End Get
        Set(ByVal value As System.Nullable(Of Integer))
            If ((_jobCardID <> value) _
                        Or (_jobCardID Is Nothing)) Then
                Me._jobCardID = value
                Me.NotifyPropertyChanged("JobCardID")
            End If
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Activity), ColumnKey:="JobID", Lazy:=True, Table:="ussSSActivity")> _
    Friend Property Activities() As IList(Of Activity)
        Get
            Return Me._activities
        End Get
        Set(ByVal value As IList(Of Activity))
            Me._activities = value
        End Set
    End Property

    <BelongsTo("CustomerID")> _
    Public Overridable Property Customer() As Customer
        Get
            Return Me._customer
        End Get
        Set(ByVal value As Customer)
            If ((_customer <> value) _
                        Or (_customer Is Nothing)) Then
                Me._customer = value
                Me.NotifyPropertyChanged("Customer")
            End If
        End Set
    End Property

    <BelongsTo("DrawingID")> _
    Public Overridable Property DrawingJobs() As Drawings
        Get
            Return Me._drawingJobs
        End Get
        Set(ByVal value As Drawings)
            If ((_drawingJobs <> value) _
                        Or (_drawingJobs Is Nothing)) Then
                Me._drawingJobs = value
                Me.NotifyPropertyChanged("DrawingJobs")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSJob", Schema:="dbo")> _
Partial Public Class Job
    Inherits JobBase
End Class

<Serializable()> _
Partial Public MustInherit Class MachineBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Machine)

    Private _code As String

    Private _description As String

    Private _dBColour As String

    Private _image() As Byte

    Private _rate As System.Nullable(Of Double)

    Private _calendarID As System.Nullable(Of Integer)

    Private _serviceCode As String

    Private _isPrimary As System.Nullable(Of Boolean)

    <Xml.Serialization.XmlIgnore()> _
    Private _activities As IList(Of Activity) = New List(Of Activity)()

    <Xml.Serialization.XmlIgnore()> _
    Private _activityLogs As IList(Of ActivityLog) = New List(Of ActivityLog)()

    <Xml.Serialization.XmlIgnore()> _
    Private _logonLogs As IList(Of LogonLog) = New List(Of LogonLog)()

    <Xml.Serialization.XmlIgnore()> _
    Private _machineChecklists As IList(Of MachineChecklist) = New List(Of MachineChecklist)()

    <Xml.Serialization.XmlIgnore()> _
    Private _machineChecklistLogs As IList(Of MachineChecklistLog) = New List(Of MachineChecklistLog)()

    <Xml.Serialization.XmlIgnore()> _
    Private _operationChecklistLogs As IList(Of OperationChecklistLog) = New List(Of OperationChecklistLog)()

    <Xml.Serialization.XmlIgnore()> _
    Private _operationMachines As IList(Of OperationMachine) = New List(Of OperationMachine)()

    <Xml.Serialization.XmlIgnore()> _
    Private _machineArtisans As IList(Of MachineArtisan) = New List(Of MachineArtisan)()

    Private _costCentre As CostCentre

    <[Property]("Code", ColumnType:="String")> _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set(ByVal value As String)
            If ((_code <> value) _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property

    <[Property]("Description", ColumnType:="String")> _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set(ByVal value As String)
            If ((_description <> value) _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property

    <[Property]("Colour", ColumnType:="String")> _
    Protected Overridable Property DBColour() As String
        Get
            Return Me._dBColour
        End Get
        Set(ByVal value As String)
            If ((_dBColour <> value) _
                        Or (_dBColour Is Nothing)) Then
                Me._dBColour = value
                Me.NotifyPropertyChanged("DBColour")
            End If
        End Set
    End Property

    <[Property]("Image", ColumnType:="BinaryBlob")> _
    Public Overridable Property Image() As Byte()
        Get
            Return Me._image
        End Get
        Set(ByVal value As Byte())
            If ((_image Is value) _
                        Or (_image Is Nothing)) Then
                Me._image = value
                Me.NotifyPropertyChanged("Image")
            End If
        End Set
    End Property

    <[Property]("Rate", ColumnType:="Double")> _
    Public Overridable Property Rate() As System.Nullable(Of Double)
        Get
            Return Me._rate
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_rate <> value) _
                        Or (_rate Is Nothing)) Then
                Me._rate = value
                Me.NotifyPropertyChanged("Rate")
            End If
        End Set
    End Property

    <[Property]("CalendarID", ColumnType:="Int32")> _
    Public Overridable Property CalendarID() As System.Nullable(Of Integer)
        Get
            Return Me._calendarID
        End Get
        Set(ByVal value As System.Nullable(Of Integer))
            If ((_calendarID <> value) _
                        Or (_calendarID Is Nothing)) Then
                Me._calendarID = value
                Me.NotifyPropertyChanged("CalendarID")
            End If
        End Set
    End Property

    <[Property](ColumnType:="String")> _
    Public Overridable Property ServiceCode() As String
        Get
            Return Me._serviceCode
        End Get
        Set(ByVal value As String)
            If ((_serviceCode <> value) _
                        Or (_serviceCode Is Nothing)) Then
                Me._serviceCode = value
                Me.NotifyPropertyChanged("ServiceCode")
            End If
        End Set
    End Property

    <[Property]("IsPrimary", ColumnType:="Boolean")> _
    Public Overridable Property IsPrimary() As System.Nullable(Of Boolean)
        Get
            Return Me._isPrimary
        End Get
        Set(ByVal value As System.Nullable(Of Boolean))
            If ((_isPrimary <> value) _
                        Or (_isPrimary Is Nothing)) Then
                Me._isPrimary = value
                Me.NotifyPropertyChanged("IsPrimary")
            End If
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Activity), ColumnKey:="MachineID", Lazy:=True, Table:="ussSSActivity")> _
    Friend Property Activities() As IList(Of Activity)
        Get
            Return Me._activities
        End Get
        Set(ByVal value As IList(Of Activity))
            Me._activities = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(ActivityLog), ColumnKey:="MachineID", Table:="ussSSActivityLog")> _
    Friend Property ActivityLogs() As IList(Of ActivityLog)
        Get
            Return Me._activityLogs
        End Get
        Set(ByVal value As IList(Of ActivityLog))
            Me._activityLogs = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(LogonLog), ColumnKey:="MachineID", Table:="ussSSLogonLog")> _
    Public Overridable Property LogonLogs() As IList(Of LogonLog)
        Get
            Return Me._logonLogs
        End Get
        Set(ByVal value As IList(Of LogonLog))
            Me._logonLogs = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(MachineChecklist), ColumnKey:="MachineID", Table:="ussSSMachineChecklist")> _
    Friend Property MachineChecklists() As IList(Of MachineChecklist)
        Get
            Return Me._machineChecklists
        End Get
        Set(ByVal value As IList(Of MachineChecklist))
            Me._machineChecklists = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(MachineChecklistLog), ColumnKey:="MachineID", Table:="ussSSMachineChecklistLog")> _
    Public Overridable Property MachineChecklistLogs() As IList(Of MachineChecklistLog)
        Get
            Return Me._machineChecklistLogs
        End Get
        Set(ByVal value As IList(Of MachineChecklistLog))
            Me._machineChecklistLogs = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(OperationChecklistLog), ColumnKey:="MachineID", Table:="ussSSOperationCheckListLog")> _
    Public Overridable Property OperationChecklistLogs() As IList(Of OperationChecklistLog)
        Get
            Return Me._operationChecklistLogs
        End Get
        Set(ByVal value As IList(Of OperationChecklistLog))
            Me._operationChecklistLogs = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(OperationMachine), ColumnKey:="MachineID", Table:="ussSSOperationMachines")> _
    Public Overridable Property OperationMachines() As IList(Of OperationMachine)
        Get
            Return Me._operationMachines
        End Get
        Set(ByVal value As IList(Of OperationMachine))
            Me._operationMachines = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(MachineArtisan), ColumnKey:="MachineID", Table:="ussSSMachineArtisans")> _
    Public Overridable Property MachineArtisans() As IList(Of MachineArtisan)
        Get
            Return Me._machineArtisans
        End Get
        Set(ByVal value As IList(Of MachineArtisan))
            Me._machineArtisans = value
        End Set
    End Property

    <BelongsTo("CostCentreID")> _
    Public Overridable Property CostCentre() As CostCentre
        Get
            Return Me._costCentre
        End Get
        Set(ByVal value As CostCentre)
            If ((_costCentre <> value) _
                        Or (_costCentre Is Nothing)) Then
                Me._costCentre = value
                Me.NotifyPropertyChanged("CostCentre")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSMachine", Schema:="dbo")> _
Partial Public Class Machine
    Inherits MachineBase
End Class

<Serializable()> _
Partial Public MustInherit Class OperationBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Operation)

    Private _code As String

    Private _description As String

    Private _rate As System.Nullable(Of Double)

    Private _isBuyOut As System.Nullable(Of Boolean)

    Private _serviceCode As String

    Private _isPrimary As System.Nullable(Of Boolean)

    <Xml.Serialization.XmlIgnore()> _
    Private _activities As IList(Of Activity) = New List(Of Activity)()

    <Xml.Serialization.XmlIgnore()> _
    Private _operationChecklists As IList(Of OperationChecklist) = New List(Of OperationChecklist)()

    <Xml.Serialization.XmlIgnore()> _
    Private _operationArtisans As IList(Of OperationArtisan) = New List(Of OperationArtisan)()

    <Xml.Serialization.XmlIgnore()> _
    Private _operationMachines As IList(Of OperationMachine) = New List(Of OperationMachine)()

    Private _costCentre As CostCentre

    <[Property]("Code", ColumnType:="String")> _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set(ByVal value As String)
            If ((_code <> value) _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property

    <[Property]("Description", ColumnType:="String")> _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set(ByVal value As String)
            If ((_description <> value) _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property

    <[Property]("Rate", ColumnType:="Double")> _
    Public Overridable Property Rate() As System.Nullable(Of Double)
        Get
            Return Me._rate
        End Get
        Set(ByVal value As System.Nullable(Of Double))
            If ((_rate <> value) _
                        Or (_rate Is Nothing)) Then
                Me._rate = value
                Me.NotifyPropertyChanged("Rate")
            End If
        End Set
    End Property

    <[Property]("IsBuyOut", ColumnType:="Boolean")> _
    Public Overridable Property IsBuyOut() As System.Nullable(Of Boolean)
        Get
            Return Me._isBuyOut
        End Get
        Set(ByVal value As System.Nullable(Of Boolean))
            If ((_isBuyOut <> value) _
                        Or (_isBuyOut Is Nothing)) Then
                Me._isBuyOut = value
                Me.NotifyPropertyChanged("IsBuyOut")
            End If
        End Set
    End Property

    <[Property]("ServiceCode", ColumnType:="String")> _
    Public Overridable Property ServiceCode() As String
        Get
            Return Me._serviceCode
        End Get
        Set(ByVal value As String)
            If ((_serviceCode <> value) _
                        Or (_serviceCode Is Nothing)) Then
                Me._serviceCode = value
                Me.NotifyPropertyChanged("ServiceCode")
            End If
        End Set
    End Property

    <[Property]("IsPrimary", ColumnType:="Boolean")> _
    Public Overridable Property IsPrimary() As System.Nullable(Of Boolean)
        Get
            Return Me._isPrimary
        End Get
        Set(ByVal value As System.Nullable(Of Boolean))
            If ((_isPrimary <> value) _
                        Or (_isPrimary Is Nothing)) Then
                Me._isPrimary = value
                Me.NotifyPropertyChanged("IsPrimary")
            End If
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Activity), ColumnKey:="OperationID", Lazy:=True, Table:="ussSSActivity")> _
    Friend Property Activities() As IList(Of Activity)
        Get
            Return Me._activities
        End Get
        Set(ByVal value As IList(Of Activity))
            Me._activities = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(OperationChecklist), ColumnKey:="OperationID", Table:="ussSSOperationChecklist")> _
    Public Overridable Property OperationChecklists() As IList(Of OperationChecklist)
        Get
            Return Me._operationChecklists
        End Get
        Set(ByVal value As IList(Of OperationChecklist))
            Me._operationChecklists = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(OperationArtisan), ColumnKey:="OperationID", Table:="ussSSOperationArtisans")> _
    Public Overridable Property OperationArtisans() As IList(Of OperationArtisan)
        Get
            Return Me._operationArtisans
        End Get
        Set(ByVal value As IList(Of OperationArtisan))
            Me._operationArtisans = value
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(OperationMachine), ColumnKey:="OperationID", Table:="ussSSOperationMachines")> _
    Public Overridable Property OperationMachines() As IList(Of OperationMachine)
        Get
            Return Me._operationMachines
        End Get
        Set(ByVal value As IList(Of OperationMachine))
            Me._operationMachines = value
        End Set
    End Property

    <BelongsTo("CostCentreID")> _
    Public Overridable Property CostCentre() As CostCentre
        Get
            Return Me._costCentre
        End Get
        Set(ByVal value As CostCentre)
            If ((_costCentre <> value) _
                        Or (_costCentre Is Nothing)) Then
                Me._costCentre = value
                Me.NotifyPropertyChanged("CostCentre")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSOperation", Schema:="dbo")> _
Partial Public Class Operation
    Inherits OperationBase
End Class

<Serializable()> _
Partial Public MustInherit Class DrawingsBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Drawings)

    Private _code As String

    Private _drawing() As Byte

    <Xml.Serialization.XmlIgnore()> _
    Private _jobs As IList(Of Job) = New List(Of Job)()

    <[Property]("Code", ColumnType:="String")> _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set(ByVal value As String)
            If ((_code <> value) _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property

    <[Property]("Drawing", ColumnType:="BinaryBlob")> _
    Public Overridable Property Drawing() As Byte()
        Get
            Return Me._drawing
        End Get
        Set(ByVal value As Byte())
            If ((_drawing Is value) _
                        Or (_drawing Is Nothing)) Then
                Me._drawing = value
                Me.NotifyPropertyChanged("Drawing")
            End If
        End Set
    End Property

    <Xml.Serialization.XmlIgnore(), _
     HasMany(GetType(Job), ColumnKey:="DrawingID", Table:="ussSSJob")> _
    Public Overridable Property Jobs() As IList(Of Job)
        Get
            Return Me._jobs
        End Get
        Set(ByVal value As IList(Of Job))
            Me._jobs = Value
        End Set
    End Property
End Class

<ActiveRecord("ussSSDrawing", Schema:="dbo")>  _
Partial Public Class Drawings
    Inherits DrawingsBase
End Class

<Serializable()>  _
Partial Public MustInherit Class LogonLogBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of LogonLog)
    
    Private _timestamp As System.Nullable(Of Date)
    
    Private _logonTypeID As System.Nullable(Of Integer)
    
    Private _artisanLogonLogs As Artisan
    
    Private _machineLogonLogs As Machine
    
    Private _reasonCodeLogonLogs As ReasonCode
    
    <[Property]("Timestamp", ColumnType:="Timestamp")>  _
    Public Overridable Property Timestamp() As System.Nullable(Of Date)
        Get
            Return Me._timestamp
        End Get
        Set
            If ((_timestamp <> value)  _
                        Or (_timestamp Is Nothing)) Then
                Me._timestamp = value
                Me.NotifyPropertyChanged("Timestamp")
            End If
        End Set
    End Property
    
    <[Property]("LogonTypeID", ColumnType:="Int32")>  _
    Public Overridable Property LogonTypeID() As System.Nullable(Of Integer)
        Get
            Return Me._logonTypeID
        End Get
        Set
            If ((_logonTypeID <> value)  _
                        Or (_logonTypeID Is Nothing)) Then
                Me._logonTypeID = value
                Me.NotifyPropertyChanged("LogonTypeID")
            End If
        End Set
    End Property
    
    <BelongsTo("ArtisanID")>  _
    Public Overridable Property ArtisanLogonLogs() As Artisan
        Get
            Return Me._artisanLogonLogs
        End Get
        Set
            If ((_artisanLogonLogs <> value)  _
                        Or (_artisanLogonLogs Is Nothing)) Then
                Me._artisanLogonLogs = value
                Me.NotifyPropertyChanged("ArtisanLogonLogs")
            End If
        End Set
    End Property
    
    <BelongsTo("MachineID")>  _
    Public Overridable Property MachineLogonLogs() As Machine
        Get
            Return Me._machineLogonLogs
        End Get
        Set
            If ((_machineLogonLogs <> value)  _
                        Or (_machineLogonLogs Is Nothing)) Then
                Me._machineLogonLogs = value
                Me.NotifyPropertyChanged("MachineLogonLogs")
            End If
        End Set
    End Property
    
    <BelongsTo("ReasonCodeID")>  _
    Public Overridable Property ReasonCodeLogonLogs() As ReasonCode
        Get
            Return Me._reasonCodeLogonLogs
        End Get
        Set
            If ((_reasonCodeLogonLogs <> value)  _
                        Or (_reasonCodeLogonLogs Is Nothing)) Then
                Me._reasonCodeLogonLogs = value
                Me.NotifyPropertyChanged("ReasonCodeLogonLogs")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSLogonLog", Schema:="dbo")>  _
Partial Public Class LogonLog
    Inherits LogonLogBase
End Class

<Serializable()>  _
Partial Public MustInherit Class LookupBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of Lookup)
    
    Private _code As String
    
    Private _description As String
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _ussSSLookupValues As IList(Of LookupValue) = New List(Of LookupValue)()
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _machineChecklists As IList(Of MachineChecklist) = New List(Of MachineChecklist)()
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _operationChecklists As IList(Of OperationChecklist) = New List(Of OperationChecklist)()
    
    <[Property]("Code", ColumnType:="String")>  _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set
            If ((_code <> value)  _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property
    
    <[Property]("Description", ColumnType:="String")>  _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set
            If ((_description <> value)  _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property
    
    <Xml.Serialization.XmlIgnore(),  _
     HasMany(GetType(LookupValue), ColumnKey:="LookupID", Table:="ussSSLookupValues")>  _
    Public Overridable Property UssSSLookupValues() As IList(Of LookupValue)
        Get
            Return Me._ussSSLookupValues
        End Get
        Set
            Me._ussSSLookupValues = value
        End Set
    End Property
    
    <Xml.Serialization.XmlIgnore(),  _
     HasMany(GetType(MachineChecklist), ColumnKey:="LookupID", Table:="ussSSMachineChecklist")>  _
    Public Overridable Property MachineChecklists() As IList(Of MachineChecklist)
        Get
            Return Me._machineChecklists
        End Get
        Set
            Me._machineChecklists = value
        End Set
    End Property
    
    <Xml.Serialization.XmlIgnore(),  _
     HasMany(GetType(OperationChecklist), ColumnKey:="LookupID", Table:="ussSSOperationChecklist")>  _
    Public Overridable Property OperationChecklists() As IList(Of OperationChecklist)
        Get
            Return Me._operationChecklists
        End Get
        Set
            Me._operationChecklists = value
        End Set
    End Property
End Class

<ActiveRecord("ussSSLookup", Schema:="dbo")>  _
Partial Public Class Lookup
    Inherits LookupBase
End Class

<Serializable()>  _
Partial Public MustInherit Class LookupValueBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of LookupValue)
    
    Private _code As String
    
    Private _description As String
    
    Private _lookup As Lookup
    
    <[Property]("Code", ColumnType:="String")>  _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set
            If ((_code <> value)  _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property
    
    <[Property]("Description", ColumnType:="String")>  _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set
            If ((_description <> value)  _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property
    
    <BelongsTo("LookupID")>  _
    Public Overridable Property Lookup() As Lookup
        Get
            Return Me._lookup
        End Get
        Set
            If ((_lookup <> value)  _
                        Or (_lookup Is Nothing)) Then
                Me._lookup = value
                Me.NotifyPropertyChanged("Lookup")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSLookupValues", Schema:="dbo")>  _
Partial Public Class LookupValue
    Inherits LookupValueBase
End Class

<Serializable()>  _
Partial Public MustInherit Class MachineChecklistBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of MachineChecklist)
    
    Private _sequence As System.Nullable(Of Integer)
    
    Private _description As String
    
    Private _dataTypeID As System.Nullable(Of Integer)
    
    Private _isForceValue As System.Nullable(Of Boolean)
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _ussSSMachineChecklistLogs As IList(Of MachineChecklistLog) = New List(Of MachineChecklistLog)()
    
    Private _machineChecklistLookups As Lookup
    
    Private _machineChecklists As Machine
    
    <[Property]("Sequence", ColumnType:="Int32")>  _
    Public Overridable Property Sequence() As System.Nullable(Of Integer)
        Get
            Return Me._sequence
        End Get
        Set
            If ((_sequence <> value)  _
                        Or (_sequence Is Nothing)) Then
                Me._sequence = value
                Me.NotifyPropertyChanged("Sequence")
            End If
        End Set
    End Property
    
    <[Property]("Description", ColumnType:="String")>  _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set
            If ((_description <> value)  _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property
    
    <[Property]("DataTypeID", ColumnType:="Int32")>  _
    Public Overridable Property DataTypeID() As System.Nullable(Of Integer)
        Get
            Return Me._dataTypeID
        End Get
        Set
            If ((_dataTypeID <> value)  _
                        Or (_dataTypeID Is Nothing)) Then
                Me._dataTypeID = value
                Me.NotifyPropertyChanged("DataTypeID")
            End If
        End Set
    End Property
    
    <[Property]("IsForceValue", ColumnType:="Boolean")>  _
    Public Overridable Property IsForceValue() As System.Nullable(Of Boolean)
        Get
            Return Me._isForceValue
        End Get
        Set
            If ((_isForceValue <> value)  _
                        Or (_isForceValue Is Nothing)) Then
                Me._isForceValue = value
                Me.NotifyPropertyChanged("IsForceValue")
            End If
        End Set
    End Property
    
    <Xml.Serialization.XmlIgnore(),  _
     HasMany(GetType(MachineChecklistLog), ColumnKey:="ChecklistID", Table:="ussSSMachineChecklistLog")>  _
    Public Overridable Property UssSSMachineChecklistLogs() As IList(Of MachineChecklistLog)
        Get
            Return Me._ussSSMachineChecklistLogs
        End Get
        Set
            Me._ussSSMachineChecklistLogs = value
        End Set
    End Property
    
    <BelongsTo("LookupID")>  _
    Public Overridable Property MachineChecklistLookups() As Lookup
        Get
            Return Me._machineChecklistLookups
        End Get
        Set
            If ((_machineChecklistLookups <> value)  _
                        Or (_machineChecklistLookups Is Nothing)) Then
                Me._machineChecklistLookups = value
                Me.NotifyPropertyChanged("MachineChecklistLookups")
            End If
        End Set
    End Property
    
    <BelongsTo("MachineID")>  _
    Public Overridable Property MachineChecklists() As Machine
        Get
            Return Me._machineChecklists
        End Get
        Set
            If ((_machineChecklists <> value)  _
                        Or (_machineChecklists Is Nothing)) Then
                Me._machineChecklists = value
                Me.NotifyPropertyChanged("MachineChecklists")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSMachineChecklist", Schema:="dbo")>  _
Partial Public Class MachineChecklist
    Inherits MachineChecklistBase
End Class

<Serializable()>  _
Partial Public MustInherit Class MachineChecklistLogBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of MachineChecklistLog)
    
    Private _value As String
    
    Private _machineChecklist As MachineChecklist
    
    Private _machineCheckListLogs As Machine
    
    Private _artisanMachineChecklistLogs As Artisan
    
    <[Property]("Value", ColumnType:="String")>  _
    Public Overridable Property Value() As String
        Get
            Return Me._value
        End Get
        Set
            If ((_value <> value)  _
                        Or (_value Is Nothing)) Then
                Me._value = value
                Me.NotifyPropertyChanged("Value")
            End If
        End Set
    End Property
    
    <BelongsTo("ChecklistID")>  _
    Public Overridable Property MachineChecklist() As MachineChecklist
        Get
            Return Me._machineChecklist
        End Get
        Set
            If ((_machineChecklist <> value)  _
                        Or (_machineChecklist Is Nothing)) Then
                Me._machineChecklist = value
                Me.NotifyPropertyChanged("MachineChecklist")
            End If
        End Set
    End Property
    
    <BelongsTo("MachineID")>  _
    Public Overridable Property MachineCheckListLogs() As Machine
        Get
            Return Me._machineCheckListLogs
        End Get
        Set
            If ((_machineCheckListLogs <> value)  _
                        Or (_machineCheckListLogs Is Nothing)) Then
                Me._machineCheckListLogs = value
                Me.NotifyPropertyChanged("MachineCheckListLogs")
            End If
        End Set
    End Property
    
    <BelongsTo("ArtisanID")>  _
    Public Overridable Property ArtisanMachineChecklistLogs() As Artisan
        Get
            Return Me._artisanMachineChecklistLogs
        End Get
        Set
            If ((_artisanMachineChecklistLogs <> value)  _
                        Or (_artisanMachineChecklistLogs Is Nothing)) Then
                Me._artisanMachineChecklistLogs = value
                Me.NotifyPropertyChanged("ArtisanMachineChecklistLogs")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSMachineChecklistLog", Schema:="dbo")>  _
Partial Public Class MachineChecklistLog
    Inherits MachineChecklistLogBase
End Class

<Serializable()>  _
Partial Public MustInherit Class OperationChecklistBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of OperationChecklist)
    
    Private _sequence As System.Nullable(Of Integer)
    
    Private _description As String
    
    Private _dataTypeID As System.Nullable(Of Integer)
    
    Private _isForceValue As System.Nullable(Of Boolean)
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _ussSSOperationChecklistLogs As IList(Of OperationChecklistLog) = New List(Of OperationChecklistLog)()
    
    Private _operationChecklists As Operation
    
    Private _operationChecklistLookups As Lookup
    
    <[Property]("Sequence", ColumnType:="Int32")>  _
    Public Overridable Property Sequence() As System.Nullable(Of Integer)
        Get
            Return Me._sequence
        End Get
        Set
            If ((_sequence <> value)  _
                        Or (_sequence Is Nothing)) Then
                Me._sequence = value
                Me.NotifyPropertyChanged("Sequence")
            End If
        End Set
    End Property
    
    <[Property]("Description", ColumnType:="String")>  _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set
            If ((_description <> value)  _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property
    
    <[Property]("DataTypeID", ColumnType:="Int32")>  _
    Public Overridable Property DataTypeID() As System.Nullable(Of Integer)
        Get
            Return Me._dataTypeID
        End Get
        Set
            If ((_dataTypeID <> value)  _
                        Or (_dataTypeID Is Nothing)) Then
                Me._dataTypeID = value
                Me.NotifyPropertyChanged("DataTypeID")
            End If
        End Set
    End Property
    
    <[Property]("IsForceValue", ColumnType:="Boolean")>  _
    Public Overridable Property IsForceValue() As System.Nullable(Of Boolean)
        Get
            Return Me._isForceValue
        End Get
        Set
            If ((_isForceValue <> value)  _
                        Or (_isForceValue Is Nothing)) Then
                Me._isForceValue = value
                Me.NotifyPropertyChanged("IsForceValue")
            End If
        End Set
    End Property
    
    <Xml.Serialization.XmlIgnore(),  _
     HasMany(GetType(OperationChecklistLog), ColumnKey:="ChecklistID", Table:="ussSSOperationChecklistLog")>  _
    Public Overridable Property UssSSOperationChecklistLogs() As IList(Of OperationChecklistLog)
        Get
            Return Me._ussSSOperationChecklistLogs
        End Get
        Set
            Me._ussSSOperationChecklistLogs = value
        End Set
    End Property
    
    <BelongsTo("OperationID")>  _
    Public Overridable Property OperationChecklists() As Operation
        Get
            Return Me._operationChecklists
        End Get
        Set
            If ((_operationChecklists <> value)  _
                        Or (_operationChecklists Is Nothing)) Then
                Me._operationChecklists = value
                Me.NotifyPropertyChanged("OperationChecklists")
            End If
        End Set
    End Property
    
    <BelongsTo("LookupID")>  _
    Public Overridable Property OperationChecklistLookups() As Lookup
        Get
            Return Me._operationChecklistLookups
        End Get
        Set
            If ((_operationChecklistLookups <> value)  _
                        Or (_operationChecklistLookups Is Nothing)) Then
                Me._operationChecklistLookups = value
                Me.NotifyPropertyChanged("OperationChecklistLookups")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSOperationChecklist", Schema:="dbo")>  _
Partial Public Class OperationChecklist
    Inherits OperationChecklistBase
End Class

<Serializable()>  _
Partial Public MustInherit Class OperationChecklistLogBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of OperationChecklistLog)
    
    Private _value As String
    
    Private _operationChecklist As OperationChecklist
    
    Private _machineOperationCheckListLogs As Machine
    
    Private _artisanOperationCheckListLogs As Artisan
    
    <[Property]("Value", ColumnType:="String")>  _
    Public Overridable Property Value() As String
        Get
            Return Me._value
        End Get
        Set
            If ((_value <> value)  _
                        Or (_value Is Nothing)) Then
                Me._value = value
                Me.NotifyPropertyChanged("Value")
            End If
        End Set
    End Property
    
    <BelongsTo("ChecklistID")>  _
    Public Overridable Property OperationChecklist() As OperationChecklist
        Get
            Return Me._operationChecklist
        End Get
        Set
            If ((_operationChecklist <> value)  _
                        Or (_operationChecklist Is Nothing)) Then
                Me._operationChecklist = value
                Me.NotifyPropertyChanged("OperationChecklist")
            End If
        End Set
    End Property
    
    <BelongsTo("MachineID")>  _
    Public Overridable Property MachineOperationCheckListLogs() As Machine
        Get
            Return Me._machineOperationCheckListLogs
        End Get
        Set
            If ((_machineOperationCheckListLogs <> value)  _
                        Or (_machineOperationCheckListLogs Is Nothing)) Then
                Me._machineOperationCheckListLogs = value
                Me.NotifyPropertyChanged("MachineOperationCheckListLogs")
            End If
        End Set
    End Property
    
    <BelongsTo("ArtisanID")>  _
    Public Overridable Property ArtisanOperationCheckListLogs() As Artisan
        Get
            Return Me._artisanOperationCheckListLogs
        End Get
        Set
            If ((_artisanOperationCheckListLogs <> value)  _
                        Or (_artisanOperationCheckListLogs Is Nothing)) Then
                Me._artisanOperationCheckListLogs = value
                Me.NotifyPropertyChanged("ArtisanOperationCheckListLogs")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSOperationChecklistLog", Schema:="dbo")>  _
Partial Public Class OperationChecklistLog
    Inherits OperationChecklistLogBase
End Class

<Serializable()>  _
Partial Public MustInherit Class ReasonCodeBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of ReasonCode)
    
    Private _code As String
    
    Private _description As String
    
    Private _isTriggerMessage As System.Nullable(Of Boolean)
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _activityLogs As IList(Of ActivityLog) = New List(Of ActivityLog)()
    
    <Xml.Serialization.XmlIgnore()>  _
    Private _logonLogs As IList(Of LogonLog) = New List(Of LogonLog)()
    
    <[Property]("Code", ColumnType:="String")>  _
    Public Overridable Property Code() As String
        Get
            Return Me._code
        End Get
        Set
            If ((_code <> value)  _
                        Or (_code Is Nothing)) Then
                Me._code = value
                Me.NotifyPropertyChanged("Code")
            End If
        End Set
    End Property
    
    <[Property]("Description", ColumnType:="String")>  _
    Public Overridable Property Description() As String
        Get
            Return Me._description
        End Get
        Set
            If ((_description <> value)  _
                        Or (_description Is Nothing)) Then
                Me._description = value
                Me.NotifyPropertyChanged("Description")
            End If
        End Set
    End Property
    
    <[Property]("IsTriggerMessage", ColumnType:="Boolean")>  _
    Public Overridable Property IsTriggerMessage() As System.Nullable(Of Boolean)
        Get
            Return Me._isTriggerMessage
        End Get
        Set
            If ((_isTriggerMessage <> value)  _
                        Or (_isTriggerMessage Is Nothing)) Then
                Me._isTriggerMessage = value
                Me.NotifyPropertyChanged("IsTriggerMessage")
            End If
        End Set
    End Property
    
    <Xml.Serialization.XmlIgnore(),  _
     HasMany(GetType(ActivityLog), ColumnKey:="ReasonCodeID", Table:="ussSSActivityLog")>  _
    Public Overridable Property ActivityLogs() As IList(Of ActivityLog)
        Get
            Return Me._activityLogs
        End Get
        Set
            Me._activityLogs = value
        End Set
    End Property
    
    <Xml.Serialization.XmlIgnore(),  _
     HasMany(GetType(LogonLog), ColumnKey:="ReasonCodeID", Table:="ussSSLogonLog")>  _
    Public Overridable Property LogonLogs() As IList(Of LogonLog)
        Get
            Return Me._logonLogs
        End Get
        Set
            Me._logonLogs = value
        End Set
    End Property
End Class

<ActiveRecord("ussSSReasonCode", Schema:="dbo")>  _
Partial Public Class ReasonCode
    Inherits ReasonCodeBase
End Class

<Serializable()>  _
Partial Public MustInherit Class OperationArtisanBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of OperationArtisan)
    
    Private _artisanOperationsDefault As Artisan
    
    Private _operationArtisansDefault As Operation
    
    <BelongsTo("ArtisanID")>  _
    Public Overridable Property ArtisanOperationsDefault() As Artisan
        Get
            Return Me._artisanOperationsDefault
        End Get
        Set
            If ((_artisanOperationsDefault <> value)  _
                        Or (_artisanOperationsDefault Is Nothing)) Then
                Me._artisanOperationsDefault = value
                Me.NotifyPropertyChanged("ArtisanOperationsDefault")
            End If
        End Set
    End Property
    
    <BelongsTo("OperationID")>  _
    Public Overridable Property OperationArtisansDefault() As Operation
        Get
            Return Me._operationArtisansDefault
        End Get
        Set
            If ((_operationArtisansDefault <> value)  _
                        Or (_operationArtisansDefault Is Nothing)) Then
                Me._operationArtisansDefault = value
                Me.NotifyPropertyChanged("OperationArtisansDefault")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSOperationArtisans")>  _
Partial Public Class OperationArtisan
    Inherits OperationArtisanBase
End Class

<Serializable()>  _
Partial Public MustInherit Class OperationMachineBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of OperationMachine)
    
    Private _operationMachineDefault As Operation
    
    Private _machineOperationDefault As Machine
    
    <BelongsTo("OperationID")>  _
    Public Overridable Property OperationMachineDefault() As Operation
        Get
            Return Me._operationMachineDefault
        End Get
        Set
            If ((_operationMachineDefault <> value)  _
                        Or (_operationMachineDefault Is Nothing)) Then
                Me._operationMachineDefault = value
                Me.NotifyPropertyChanged("OperationMachineDefault")
            End If
        End Set
    End Property
    
    <BelongsTo("MachineID")>  _
    Public Overridable Property MachineOperationDefault() As Machine
        Get
            Return Me._machineOperationDefault
        End Get
        Set
            If ((_machineOperationDefault <> value)  _
                        Or (_machineOperationDefault Is Nothing)) Then
                Me._machineOperationDefault = value
                Me.NotifyPropertyChanged("MachineOperationDefault")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSOperationMachines")>  _
Partial Public Class OperationMachine
    Inherits OperationMachineBase
End Class

<Serializable()>  _
Partial Public MustInherit Class MachineArtisanBase
    Inherits UniSource.Helper.ActiveRecord.AREquatableBase(Of MachineArtisan)
    
    Private _machineArtisanDefault As Machine
    
    Private _artisanMachineDefault As Artisan
    
    <BelongsTo("MachineID")>  _
    Public Overridable Property MachineArtisanDefault() As Machine
        Get
            Return Me._machineArtisanDefault
        End Get
        Set
            If ((_machineArtisanDefault <> value)  _
                        Or (_machineArtisanDefault Is Nothing)) Then
                Me._machineArtisanDefault = value
                Me.NotifyPropertyChanged("MachineArtisanDefault")
            End If
        End Set
    End Property
    
    <BelongsTo("ArtisanID")>  _
    Public Overridable Property ArtisanMachineDefault() As Artisan
        Get
            Return Me._artisanMachineDefault
        End Get
        Set
            If ((_artisanMachineDefault <> value)  _
                        Or (_artisanMachineDefault Is Nothing)) Then
                Me._artisanMachineDefault = value
                Me.NotifyPropertyChanged("ArtisanMachineDefault")
            End If
        End Set
    End Property
End Class

<ActiveRecord("ussSSMachineArtisans")>  _
Partial Public Class MachineArtisan
    Inherits MachineArtisanBase
End Class

Public Class awShopFloorHelper
    
    Public Shared Function GetTypes() As Type()
        Return New Type() {GetType(Activity), GetType(Part), GetType(ActivityLog), GetType(Artisan), GetType(Configuration), GetType(CostCentre), GetType(Customer), GetType(Job), GetType(Machine), GetType(Operation), GetType(Drawings), GetType(LogonLog), GetType(Lookup), GetType(LookupValue), GetType(MachineChecklist), GetType(MachineChecklistLog), GetType(OperationChecklist), GetType(OperationChecklistLog), GetType(ReasonCode), GetType(OperationArtisan), GetType(OperationMachine), GetType(MachineArtisan)}
    End Function
End Class
